meta:
  gh-status_handlers: &gh-status-handlers
    on_success:
      put: gh-status
      inputs: [phatik]
      params: { state: success }
    on_failure:
      put: gh-status
      inputs: [phatik]
      params: { state: failure }
    on_error:
      put: gh-status
      inputs: [phatik]
      params: { state: error }

resource_types:
  # This manages the GitHub status lines
  - name: cogito
    type: registry-image
    check_every: 1m
    source:
      repository: ((harbor.image-repo-name))/cogito
      tag: latest

resources:
  - name: phatik
    type: git
    icon: github
    source:
      uri: https://github.com/tgolsson/phatik
      paths:
        - phatik-backend/**
        - Dockerfiles/phatik-backend/**
        - .concourse/phatik-backend.yml

    webhook_token: concourse-ci-test-trigger

  # Where we will push the image
  - name: phatik-backend
    type: registry-image
    icon: docker
    source:
      repository: ((phatik.image-repo-name))/backend
      username: ((phatik.registry-username))
      password: ((phatik.registry-password))
      tag: latest

  # This is the status object that will be updated in each job
  - name: gh-status
    type: cogito
    check_every: 1h
    source:
      owner: tgolsson
      repo: phatik
      access_token: ((status-token))
      context_namespace: phatik-backend

jobs:
  - name: build
    public: true

    <<: *gh-status-handlers
    plan:
      - get: phatik
        trigger: true
        passed: [clippy, rustfmt, test]
      - put: gh-status
        inputs: [phatik]
        params: { state: pending }

      - task: build
        config:
          platform: linux
          image_resource:
            type: registry-image
            source: { repository: docker.io/library/rust }

          run:
            path: cargo
            args: ["build"]
            dir: phatik/phatik-backend

          inputs:
            - name: phatik
          outputs:
            - name: phatik

  - name: test
    public: true

    <<: *gh-status-handlers
    plan:
      - get: phatik
        trigger: true

      - put: gh-status
        inputs: [phatik]
        params: { state: pending }

      - task: test
        config:
          platform: linux
          image_resource:
            type: registry-image
            source: { repository: docker.io/library/rust }

          run:
            path: cargo
            args: ["test"]
            dir: phatik/phatik-backend

          inputs:
            - name: phatik

  - name: clippy
    public: true
    <<: *gh-status-handlers
    plan:
      - get: phatik
        trigger: true

      - put: gh-status
        inputs: [phatik]
        params: { state: pending }

      - task: clippy
        config:
          platform: linux
          image_resource:
            type: registry-image
            source: { repository: docker.io/library/rust }

          run:
            path: bash
            args:
              - -c
              - |
                rustup component add clippy
                cargo clippy
            dir: phatik/phatik-backend

          inputs:
            - name: phatik

  - name: rustfmt
    public: true
    <<: *gh-status-handlers
    plan:
      - get: phatik
        trigger: true

      - put: gh-status
        inputs: [phatik]
        params: { state: pending }

      - task: fmt
        config:
          platform: linux
          image_resource:
            type: registry-image
            source: { repository: docker.io/library/rust }

          run:
            path: bash
            args:
              - -c
              - |
                rustup component add rustfmt
                cargo fmt -- --check
            dir: phatik/phatik-backend

          inputs:
            - name: phatik

  - name: publish
    public: true

    <<: *gh-status-handlers
    plan:
      - get: phatik
        trigger: true
        passed: [clippy, rustfmt, test, build]

      - put: gh-status
        inputs: [phatik]
        params: { state: pending }

      - task: build-release
        config:
          platform: linux
          image_resource:
            type: registry-image
            source: { repository: docker.io/library/rust }

          run:
            path: bash
            args:
              - -c
              - |
                cargo build --release
                cp ./target/release/phatik-backend ../../phatik-backend-binary/phatik-backend
            dir: phatik/phatik-backend

          inputs:
            - name: phatik
          outputs:
            - name: phatik-backend-binary

      - task: docker-image
        privileged: true
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: vito/oci-build-task

          inputs:
            - name: phatik-backend-binary
            - name: phatik

          outputs:
            - name: image
          params:
            CONTEXT: .
            DOCKERFILE: phatik/Dockerfiles/phatik-backend/Dockerfile
          run:
            path: build

      - put: phatik-backend
        params:
          image: image/image.tar
