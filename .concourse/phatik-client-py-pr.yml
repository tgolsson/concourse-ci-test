meta:
  gh-status_handlers: &gh-status-handlers
    on_success:
      put: gh-status
      inputs: [pull-request]
      params: { state: success }
    on_failure:
      put: gh-status
      inputs: [pull-request]
      params: { state: failure }
    on_error:
      put: gh-status
      inputs: [pull-request]
      params: { state: error }

resource_types:
# This manages the GitHub status lines
- name: cogito
  type: registry-image
  check_every: 1m
  source:
    repository: ((harbor.image-repo-name))/cogito
    tag: latest

- name: pull-request
  type: registry-image
  source:
    repository: teliaoss/github-pr-resource

resources:
- name: pull-request
  type: pull-request
  check_every: 24h
  webhook_token: concourse-ci-test
  source:
    repository: tgolsson/phatik
    access_token: ((pr-token))
    paths:
    - phatik-client-py/**
    - .concourse/phatik-client-py-pr.yml

# This is the status object that will be updated in each job
- name: gh-status
  type: cogito
  check_every: 1h
  source:
    owner: tgolsson
    repo: phatik
    access_token: ((status-token))
    context_namespace: phatik-client-py

jobs:
- name: begin-pr
  plan:
  - get: pull-request
    trigger: true
    version: every
    params: { list_changed_files: true }

  - task: generate-comment
    file: pull-request/.concourse/task-generate-comment.yml

  - put: pull-request
    params:
      path: pull-request
      status: pending
      context: pull-request
      base_context: phatik-client-py
      comment_file: messages/status.txt

- name: test
  public: true

  <<: *gh-status-handlers
  plan:
  - get: pull-request
    trigger: true
    version: every
    passed: [begin-pr]

  - put: gh-status
    inputs: [pull-request]
    params: { state: pending }

  - task: test
    config:
      platform: linux
      image_resource:
        type: registry-image
        source: { repository: docker.io/library/python, tag: 3.7-alpine }

      run:
        path: sh
        args:
        - "-c"
        - |
          pip3.7 install pytest
          pip3.7 install .
          pytest tests
        dir: pull-request/phatik-client-py

      inputs:
      - name: pull-request
      outputs:
      - name: pull-request

- name: flake8
  public: true

  <<: *gh-status-handlers
  plan:
  - get: pull-request
    trigger: true
    version: every
    passed: [begin-pr]

  - put: gh-status
    inputs: [pull-request]
    params: { state: pending }

  - task: test
    config:
      platform: linux
      image_resource:
        type: registry-image
        source: { repository: docker.io/library/python, tag: 3.7-alpine }

      run:
        path: sh
        args:
        - "-c"
        - |
          pip3.7 install flake8
          pip3.7 install .
          flake8 phatik
        dir: pull-request/phatik-client-py

      inputs:
      - name: pull-request
      outputs:
      - name: pull-request

- name: pylint
  public: true

  <<: *gh-status-handlers
  plan:
  - get: pull-request
    trigger: true
    version: every
    passed: [begin-pr]

  - put: gh-status
    inputs: [pull-request]
    params: { state: pending }

  - task: test
    config:
      platform: linux
      image_resource:
        type: registry-image
        source: { repository: docker.io/library/python, tag: 3.7-alpine }

      run:
        path: sh
        args:
        - "-c"
        - |
          apk add gcc libc-dev
          pip3.7 install pylint
          pip3.7 install .
          pylint phatik
        dir: pull-request/phatik-client-py

      inputs:
      - name: pull-request
      outputs:
      - name: pull-request

- name: end-pr
  plan:
  - get: pull-request
    passed: [ pylint, flake8, test]
    trigger: true
    version: every

  - put: pull-request
    params:
      path: pull-request
      context: pull-request
      base_context: phatik-client-py
      status: success
