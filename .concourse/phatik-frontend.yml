meta:
  gh-status_handlers: &gh-status-handlers
    on_success:
      put: gh-status
      inputs: [phatik]
      params: {state: success}
    on_failure:
      put: gh-status
      inputs: [phatik]
      params: {state: failure}
    on_error:
      put: gh-status
      inputs: [phatik]
      params: {state: error}


resource_types:
# This manages the GitHub status lines
- name: cogito
  type: registry-image
  check_every: 1m
  source:
    repository: ((harbor.image-repo-name))/cogito
    username: ((harbor.registry-username))
    password: ((harbor.registry-password))
    tag: latest

resources:
# The repo with our Dockerfile
- name: phatik
  type: git
  icon: github
  source:
    uri: https://github.com/tgolsson/phatik.git
    branch: main
    paths:
    - phatik-frontend/**
    - .concourse/phatik-frontend.yml

# Where we will push the image
- name: phatik-frontend
  type: registry-image
  icon: docker
  source:
    repository: ((phatik.image-repo-name))/frontend
    username: ((phatik.registry-username))
    password: ((phatik.registry-password))
    tag: latest

# This is the status object that will be updated in each job
- name: gh-status
  type: cogito
  check_every: 1h
  source:
    owner: tgolsson
    repo: phatik
    access_token: ((status-token))
    context_namespace: phatik-frontend

jobs:
- name: build-and-push-docker-image
  public: true

  <<: *gh-status-handlers
  plan:
  - get: phatik
    trigger: true

  - put: gh-status
    inputs: [phatik]
    params: {state: pending}

  - task: build-task-image
    privileged: true
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: vito/oci-build-task
      inputs:
      - name: phatik
      outputs:
      - name: image
      params:
        DOCKERFILE: phatik/Dockerfiles/phatik-frontend/Dockerfile
        CONTEXT: phatik
      run:
        path: build

  - put: phatik-frontend
    params:
      image: image/image.tar

